{"version":3,"sources":["i18n.js","components/Textarea/index.js","components/App/index.js","utils/formatForCss.js","utils/encoding.js","utils/createPreviewUrl.js","index.js"],"names":["i18n","use","initReactI18next","init","resources","en","translation","ru","ukr","lng","keySeparator","interpolation","escapeValue","Textarea","props","value","onChange","isReadonly","readOnly","App","state","inputValue","fileName","isFileLoaded","isFileError","selectedBackground","fileInputRef","React","createRef","handleTextareaChange","target","setState","fileSelectedHandler","event","file","files","name","includes","reader","FileReader","readAsText","onload","fileContent","result","current","copyFunction","textArea","document","createElement","body","appendChild","select","execCommand","style","display","removeChild","exampleFunction","changeBackgroundColor","color","lang","console","log","changeLanguage","code","encodedSvg","currentFileWithUrl","replace","addUrl","encoded","encodeURIComponent","charsHashMap","Object","keys","forEach","char","regex","RegExp","encodeSvg","this","formattedForCssValue","previewUrl","createPreviewUrl","t","className","class","onClick","handleChangeLang","id","ref","type","aria-describedby","htmlFor","fileLabelText","classNames","backgroundImage","Component","withTranslation","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.536b680b.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nconst resources = {\r\n  en: {\r\n    translation: {\r\n      \"description\": `Hello! The use of SVG in CSS without encoding is\r\n                      possible only in Webkit based browsers.\r\n        This application will help you to quickly get CSS code from SVG.`,\r\n      \"upload\": \"Upload\",\r\n      \"choose\": \"Choosen file\",\r\n      \"only_svg\": \"You can upload only SVG file!\",\r\n      \"browse\": \"Browse\",\r\n      \"insert\": \"Insert SVG:\",\r\n      \"take_encoded\": \"Take encoded:\",\r\n      \"css\": \"Ready for CSS:\",\r\n      \"preview\": \"Preview:\",\r\n      \"example\": \"example\",\r\n      \"copy\": \"copy\",\r\n      \"background\": \"Background\"\r\n    }\r\n  },\r\n  ru: {\r\n    translation: {\r\n      \"description\": `Здравствуйте! Использование SVG в CSS без кодирования\r\n      возможно только в браузерах на базе Webkit.\r\n      Это приложение поможет вам быстро получить CSS код из SVG.`,\r\n      \"upload\": \"Загрузить\",\r\n      \"choose\": \"Выбрать файл\",\r\n      \"only_svg\": \"Вы можете загрузить только SVG файл!\",\r\n      \"browse\": \"Выбрать\",\r\n      \"insert\": \"Вставить SVG:\",\r\n      \"take_encoded\": \"Закодированный:\",\r\n      \"css\": \"Код для CSS:\",\r\n      \"preview\": \"Превью:\",\r\n      \"example\": \"пример\",\r\n      \"copy\": \"скопировать\",\r\n      \"background\": \"Фон\"\r\n    }\r\n  },\r\n  ukr: {\r\n    translation: {\r\n      \"description\": `Ласкаво просимо! Використання SVG у CSS без кодування\r\n      можливо лише у браузерах на основі Webkit. Цей додаток допоможе вам швидко\r\n      отримати CSS код з SVG.`,\r\n      \"upload\": \"Завантажити\",\r\n      \"choose\": \"Вибрати файл\",\r\n      \"only_svg\": \"Ви можете завантажити тільки SVG файл!\",\r\n      \"browse\": \"Вибрати\",\r\n      \"insert\": \"Вставити SVG:\",\r\n      \"take_encoded\": \"Закодований:\",\r\n      \"css\": \"Код для CSS:\",\r\n      \"preview\": \"Прев'ю:\",\r\n      \"example\": \"приклад\",\r\n      \"copy\": \"скопіювати\",\r\n      \"background\": \"Фон\"\r\n    }\r\n  }\r\n};\r\n\r\ni18n\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n    interpolation: {\r\n      escapeValue: false // react already safes from xss\r\n    }\r\n  });\r\n\r\n  export default i18n;","import React from 'react'\nimport './TextArea.css'\n\nconst Textarea = (props) => {\n  const { value, onChange, isReadonly } = props\n\n  return (\n    <textarea\n      value={value}\n      onChange={onChange}\n      readOnly={isReadonly}\n    />\n  )\n}\n\nexport default Textarea","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Textarea from \"../Textarea\";\nimport { encodeSvg, formatForCss, createPreviewUrl } from \"../../utils\";\nimport classNames from \"classnames\";\nimport { withTranslation } from 'react-i18next';\nimport i18n from \"../../i18n\";\n\nclass App extends Component {\n  state = {\n    inputValue: '',\n    fileName: '',\n    isFileLoaded: false,\n    isFileError: false,\n    selectedBackground: 'white'\n  };\n\n  handleChangeLang(lang) {\n    console.log('work')\n    i18n.changeLanguage(lang)\n  }\n\n  fileInputRef = React.createRef()\n\n  handleTextareaChange = ({ target }) => {\n    const { value } = target\n\n    this.setState({\n      inputValue: value,\n      isFileLoaded: false,\n    })\n  };\n\n  fileSelectedHandler = (event) => {\n    const file = event.target.files[0]\n\n    if(!file) {\n      return;\n    }\n\n    if(!file.name.includes(\".svg\")) {\n      this.setState({\n        inputValue: '',\n        isFileLoaded: true,\n        isFileError: true,\n      })\n\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.readAsText(file);\n\n    reader.onload = () => {\n      const fileContent = reader.result;\n\n      this.fileInputRef.current.value = '';\n\n      this.setState({\n        inputValue: fileContent,\n        fileName: file.name,\n        isFileLoaded: true,\n        isFileError: false,\n      })\n    }\n  };\n\n  get fileLabelText() {\n    if(this.state.isFileLoaded) {\n      if(this.state.isFileError) {\n        return this.props.t('only_svg')\n      }\n\n      return this.state.fileName\n    }\n\n    return this.props.t('choose')\n  }\n\n  copyFunction = (value) => {\n    const textArea = document.createElement(\"textarea\")\n    document.body.appendChild(textArea)\n    textArea.value = value\n    textArea.select();\n    document.execCommand(\"copy\")\n    textArea.style.display = 'none'\n    document.body.removeChild(textArea)\n  }\n\n  exampleFunction = value => {\n    value = `<svg viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"><defs><style>.a{fill:#e82e5f;}.b{fill:none;stroke:#1c4db8;stroke-linecap:round;stroke-linejoin:round;stroke-width:1.5px;}</style></defs><title/><path class=\"a\" d=\"M45.437,2.318a1.106,1.106,0,0,0-.83-.684C36.772.59,28.362,5.749,28.424,13.457c-3.415-4-8.963-3.844-11.926-2.4a.657.657,0,0,0-.034,1.164c3.841,2.162,7.335,7.938,13,6.7a10.151,10.151,0,0,1-.632,3.655.75.75,0,0,0,.472.95.74.74,0,0,0,.239.04.751.751,0,0,0,.711-.511,10.935,10.935,0,0,0,.464-6.236c8.652.449,11.777-9.428,14.65-13.42A1.113,1.113,0,0,0,45.437,2.318ZM21.379,12.129c5.688.239,7.98,5.656,7.98,5.656A24.862,24.862,0,0,0,21.379,12.129Zm8.633,3.236s2.242-9.73,11.681-11.8A42.248,42.248,0,0,0,30.012,15.365Z\"/><circle class=\"b\" cx=\"29.999\" cy=\"40.652\" r=\"17.848\"/><path class=\"b\" d=\"M23.5,57.276s4.015-4.87.258-5.918a4.4,4.4,0,0,1-3.28-4.757h1.712A2.38,2.38,0,0,0,24.5,43.644l-1.19-4.759c-.383-1.534-5.326-4.17-10.8-1.8\"/><path class=\"b\" d=\"M44.254,29.943,41.013,32.1a3.686,3.686,0,0,1-3.934.131,3.751,3.751,0,0,0-4.638.615,3.883,3.883,0,0,0-.989,2l-.317,1.659a2.38,2.38,0,0,0,2.309,2.957s5.17-.8,5.5,1.688c.221,1.649-.94,3.112-1.75,3.912a2.706,2.706,0,0,0-.011,3.886l.045.04a2.918,2.918,0,0,0,2.226.652l6.32-.654a17.769,17.769,0,0,0-1.525-19.038Z\"/></svg>`\n\n    this.setState({\n      inputValue: value\n    })\n  }\n\n  changeBackgroundColor = (color) => {\n    this.setState({ selectedBackground: color })\n\n    // const classesArr = [...background.classList]\n    // const newArr = classesArr.filter(currentClass => currentClass.includes(\"button\"))\n    // background.classList.remove(newArr[0])\n    // background.classList.add(event.target.className)\n  }\n\n  render() {\n    const encodedSvg = encodeSvg(this.state.inputValue)\n    const formattedForCssValue = formatForCss(encodedSvg)\n    const previewUrl = createPreviewUrl(encodedSvg)\n    \n    console.log(this.props.t)\n    console.log(this.props)\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"mt-4 mb-3 text-center\">\n          URL-encoder for SVG\n        </h1>\n        \n        <div class=\"lang-button-wrapper\">\n          <button className=\"en\" onClick={() => this.handleChangeLang('en')}></button>\n          <button className=\"ru\" onClick={() => this.handleChangeLang('ru')}></button>\n          <button className=\"ukr\" onClick={() => this.handleChangeLang('ukr')}></button>\n        </div>\n\n        <p className=\"mb-4 text-center\">{this.props.t('description')}</p>\n\n        <div className=\"input-group mb-4\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"inputGroupFileAddon01\">\n            {this.props.t('upload')}\n            </span>\n          </div>\n          <div className=\"custom-file\">\n            <input\n              ref={this.fileInputRef}\n              onChange={this.fileSelectedHandler}\n              type=\"file\"\n              className=\"custom-file-input\"\n              id=\"inputGroupFile01\"\n              aria-describedby=\"inputGroupFileAddon01\"\n            />\n\n            <label\n              style={{ color: this.state.isFileError ? \"red\" : \"inherit\" }}\n              className=\"custom-file-label\"\n              htmlFor=\"inputGroupFile01\"\n            >\n              {this.fileLabelText}\n            </label>\n          </div>\n        </div>\n\n        <div className=\"textarea-wrapper\">\n          <div className=\"textarea-container\">\n            <label>{this.props.t('insert')}</label>\n            <button className=\"action-button\" onClick={() => this.exampleFunction(this.state.inputValue)}>{this.props.t('example')}</button>\n            <Textarea\n              onChange={this.handleTextareaChange}\n              value={this.state.inputValue}\n            />\n          </div>\n\n          <div className=\"textarea-container\">\n            <label>{this.props.t('take_encoded')}</label>\n            <button className=\"action-button\" onClick={() => this.copyFunction(encodedSvg)}>{this.props.t('copy')}</button>\n            <Textarea\n              isReadonly\n              value={encodedSvg}\n            />\n          </div>\n\n          <div className=\"textarea-container\">\n            <label>{this.props.t('css')}</label>\n            <button className=\"action-button\" onClick={() => this.copyFunction(formattedForCssValue)}>{this.props.t('copy')}</button>\n            <Textarea\n              isReadonly\n              onClick={this.copyFunction}\n              value={formattedForCssValue}\n            />\n          </div>\n\n          <div className=\"textarea-container\">\n            <label>{this.props.t('preview')}</label>\n            <div className=\"button-wrapper\">\n              <p>{this.props.t('background')}</p>\n              <button onClick={() => this.changeBackgroundColor('white')} className=\"white-button\"></button>\n              <button onClick={() => this.changeBackgroundColor('yellow')} className=\"yellow-button\"></button>\n              <button onClick={() => this.changeBackgroundColor('black')} className=\"black-button\"></button>\n            </div> \n            <div className={classNames([\"resultContainer\", `${this.state.selectedBackground}-button`])}>\n              <div style={{ backgroundImage: previewUrl }} className=\"image\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(App);\n","export default function formatForCss(code) {\n  if(code === '') {\n    return '';\n  }\n\n  return `background-image: url(\"data:image/svg+xml,${code}\")`;\n}","export default function encodeSvg(value) {\n  function addUrl(value) {\n    if (!value.includes(`http://www.w3.org/2000/svg`)) {\n      let url = \"http://www.w3.org/2000/svg\";\n      value = value.replace(/<svg/g, `<svg xmlns='${url}'`);\n    }\n    return value;\n  }\n\n  const currentFileWithUrl = addUrl(value);\n  let encoded = encodeURIComponent(currentFileWithUrl);\n\n  const charsHashMap = {\n    \"%3D\": \"=\",\n    \"%22\": \"'\",\n    \"%20\": \" \",\n    \"%3A\": \":\",\n    \"%2F\": \"/\",\n    \"%0A\": \"\"\n  }\n\n  Object.keys(charsHashMap).forEach(char => {\n    if (encoded.includes(char)) {\n      const regex = new RegExp(char, \"g\");\n      encoded = encoded.replace(regex, charsHashMap[char]);\n    }\n  })\n\n  return encoded;\n}\n","export default function createPreviewUrl(code) {\n  return `url(\"data:image/svg+xml,${code}\")`;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18n';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}